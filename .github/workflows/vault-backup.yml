name: "Bitwarden Org Vault Backup"
on:
  push:
    branches:
      - GHA_Backup
  # Uncomment this to run daily
  # schedule:
  #   - cron: "0 0 * * *"

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BW_SM_TOKEN }}
          base_url: ${{ secrets.BW_SM_URL }}
          secrets: |
            ${{ secrets.BW_SM_BITWARDEN_EMAIL_ID }} > BITWARDEN_EMAIL
            ${{ secrets.BW_SM_BITWARDEN_PASSWORD_ID }} > BITWARDEN_PASSWORD
            ${{ secrets.BW_SM_BITWARDEN_CLIENT_ID_ID }} > BW_CLIENTID
            ${{ secrets.BW_SM_BITWARDEN_CLIENTSECRET_ID }} > BW_CLIENTSECRET
            ${{ secrets.BW_SM_BITWARDEN_S3_ACCESS_KEY_ID }} > S3_ACCESS_KEY_ID
            ${{ secrets.BW_SM_BITWARDEN_S3_SECRET_ACCESS_KEY_ID }} > S3_SECRET_ACCESS_KEY
            ${{ secrets.BW_SM_BITWARDEN_S3_ENDPOINT_URL_ID }} > S3_ENDPOINT_URL
            ${{ secrets.BW_SM_BITWARDEN_BW_ORG_ID_ID }} > BW_ORG_ID
            ${{ secrets.BW_SM_BITWARDEN_S3_BUCKET_NAME_ID }}  > S3_BUCKET_NAME
            ${{ secrets.BW_SM_BITWARDEN_BW_ENC_PASS_ID }}  > ENC_PASS

      - name: "Install S3CMD"
        run: |
          sudo apt-get update
          sudo apt-get install -y s3cmd     

      - name: "üíø Install Bitwarden CLI (Standalone)"
        run: |
          set -e
          curl -L "https://vault.bitwarden.com/download/?app=cli&platform=linux" -o bw.zip
          unzip bw.zip
          sudo mv bw /usr/local/bin/

      - name: "üîê Log in to Bitwarden CLI with API KEY"
        run: |
          set -e
          bw login --apikey --quiet
        shell: bash

      - name: "üîì Unlock Vault"
        run: |
          set -e
          SESSION=$(bw unlock --passwordenv BITWARDEN_PASSWORD --raw)
          echo "::add-mask::$SESSION"
          echo "BW_SESSION=$SESSION" >> $GITHUB_ENV
        shell: bash

      - name: "üì¶ Export Vault"
        run: |
          set -e
          echo "::add-mask::$BW_SESSION"  
          echo "Backing up Bitwarden Vault...."

          # Export the vault using the BW_SESSION from the previous step
          bw export --session "$BW_SESSION" --organizationid $BW_ORG_ID --format encrypted_json --password $ENC_PASS --output vault.json

          # Ensure file exists
          if [ ! -f vault.json ]; then
            echo "‚ùå Export failed! Vault file not found."
            exit 1
          fi

          echo "‚úÖ Vault exported successfully!"
          echo "Logging out..."
          bw logout
          # Clear BW_SESSION after use
          unset BW_SESSION
        shell: bash

      - name: "‚òÅÔ∏è Upload to Civo Object Storage"
        run: |
          set -e  # Stop on first error
          
          # Export S3 credentials as environment variables
          export AWS_ACCESS_KEY_ID="${{ env.S3_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ env.S3_SECRET_ACCESS_KEY }}"
          export S3_HOST="${{ env.S3_ENDPOINT_URL }}"
          export S3_BUCKET="${{ env.S3_BUCKET_NAME }}"

          # Generate timestamp
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          BACKUP_FILE="bitwarden_backup_$TIMESTAMP.json"

          mv vault.json "$BACKUP_FILE"
          
          echo "Uploading vault.json to S3..."
    
          # Use environment variables directly without relying on --no-config
          S3CMD_OPTS="--access_key=$AWS_ACCESS_KEY_ID --secret_key=$AWS_SECRET_ACCESS_KEY --host=$S3_HOST --host-bucket=$S3_HOST"
    
          # Upload the file using s3cmd
          s3cmd $S3CMD_OPTS put "$BACKUP_FILE" s3://$S3_BUCKET/ --acl-private
    
          echo "‚úÖ Upload successful!"
        shell: bash
      
      - name: "üßπ Delete old backups (keep last 10)"
        run: |
          set -e  # Stop on first error
          
          # Export S3 credentials as environment variables
          export AWS_ACCESS_KEY_ID="${{ env.S3_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ env.S3_SECRET_ACCESS_KEY }}"
          export S3_HOST="${{ env.S3_ENDPOINT_URL }}"
          export S3_BUCKET="${{ env.S3_BUCKET_NAME }}"
          
          S3CMD_OPTS="--access_key=$AWS_ACCESS_KEY_ID --secret_key=$AWS_SECRET_ACCESS_KEY --host=$S3_HOST --host-bucket=$S3_HOST"
          # List backups and filter filenames matching "bitwarden_backup_"  
          BACKUP_FILES=$(s3cmd $S3CMD_OPTS ls s3://$S3_BUCKET/ | grep 'bitwarden_backup_' | awk '{print $4}' | sort)
          # Count total backups  
          TOTAL_BACKUPS=$(echo "$BACKUP_FILES" | wc -l)
          # Set the number of backups to keep  
          KEEP_COUNT=10
          # Ensure DELE  TE_COUNT is never negative
          DELETE_COUNT=$((TOTAL_BACKUPS - KEEP_COUNT))
          if [ "$DELETE_COUNT" -lt "0" ]; then
              DELETE_COUNT=0
          fi
          echo "üìÇ Total backups found: $TOTAL_BACKUPS"
          echo "üì¶ Keeping last $KEEP_COUNT backups"
          # Only print delete message if there are b  ackups to delete
          if [ "$DELETE_COUNT" -gt "0" ]; then
              echo "üóëÔ∏è  Deleting $DELETE_COUNT old backups..."
              echo "$BACKUP_FILES" | head -n "$DELETE_COUNT" | while read -r line; do
                  echo "‚ùå Deleting old backup: $line"
                  s3cmd $S3CMD_OPTS del "$line"
              done
              echo "‚úÖ Deleted $DELETE_COUNT old backups!"
          else
              echo "üéâ No old backups to delete!"
          fi
          #   Show how many remain
          echo "üìÇ Remaining backups: $(s3cmd $S3CMD_OPTS ls s3://$S3_BUCKET/ | grep 'bitwarden_backup_' | wc -l)"
    
